{% extends 'base.html.twig' %}

{% block title %}{{ 'instructions.title'|trans }} - Workoflow{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .instructions-page {
            min-height: 100vh;
            background-color: #0a0a0a;
            color: #ffffff;
        }

        .instructions-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
        }

        .page-title {
            font-size: 2rem;
            font-weight: 600;
            margin-bottom: 2rem;
            color: #ffffff;
        }

        .instructions-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            margin-top: 2rem;
        }

        .left-column, .right-column {
            background-color: #1a1a1a;
            border: 1px solid #2a2a2a;
            border-radius: 0.5rem;
            padding: 2rem;
        }

        .form-section {
            margin-bottom: 2rem;
        }

        .section-title {
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: #ff6b35;
        }

        .section-subtitle {
            font-size: 0.875rem;
            color: #9ca3af;
            margin-bottom: 1.5rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-size: 0.875rem;
            font-weight: 500;
            color: #ffffff;
        }

        .form-control {
            width: 100%;
            padding: 0.625rem 0.875rem;
            background-color: #0a0a0a;
            border: 1px solid #2a2a2a;
            border-radius: 0.375rem;
            color: #ffffff;
            font-size: 0.875rem;
            transition: all 0.2s;
        }

        .form-control:focus {
            outline: none;
            border-color: #ff6b35;
            box-shadow: 0 0 0 2px rgba(255, 107, 53, 0.2);
        }

        .form-control[readonly] {
            background-color: #1a1a1a;
            color: #9ca3af;
            cursor: not-allowed;
        }

        .form-select {
            width: 100%;
            padding: 0.625rem 0.875rem;
            background-color: #0a0a0a;
            border: 1px solid #2a2a2a;
            border-radius: 0.375rem;
            color: #ffffff;
            font-size: 0.875rem;
            cursor: pointer;
        }

        .form-textarea {
            width: 100%;
            min-height: 150px;
            padding: 0.875rem;
            background-color: #0a0a0a;
            border: 1px solid #2a2a2a;
            border-radius: 0.375rem;
            color: #ffffff;
            font-size: 0.875rem;
            resize: vertical;
            font-family: inherit;
        }

        .btn-primary {
            background-color: #ff6b35;
            color: #ffffff;
            padding: 0.625rem 1.5rem;
            border: none;
            border-radius: 0.375rem;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .btn-primary:hover {
            background-color: #e55a2b;
        }

        .workflow-canvas {
            background-color: #0a0a0a;
            border: 1px solid #2a2a2a;
            border-radius: 0.5rem;
            height: 600px;
            position: relative;
        }

        .workflow-placeholder {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100%;
            color: #6b7280;
            font-size: 1rem;
        }

        #reactflow-container {
            width: 100%;
            height: 100%;
            border-radius: 0.5rem;
            overflow: hidden;
        }

        .hidden {
            display: none !important;
        }

        @media (max-width: 1024px) {
            .instructions-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
{% endblock %}

{% block body %}
<div class="instructions-page">
    {% include '_partials/header.html.twig' %}

    <div class="instructions-container" data-controller="instructions">
        <h1 class="page-title">{{ 'instructions.title'|trans }}</h1>

        <form method="post" action="{{ path('app_instructions_update') }}" id="instructions-form" data-action="submit->instructions#submitForm">
            <div class="instructions-grid">
                <!-- Left Column -->
                <div class="left-column">
                    <!-- Organisation Properties -->
                    <div class="form-section">
                        <div class="form-group">
                            <label for="name" class="form-label">{{ 'instructions.organisation_name'|trans }}</label>
                            <input type="text"
                                   class="form-control"
                                   id="name"
                                   name="name"
                                   value="{{ organisation.name }}"
                                   {% if not app.user.isAdmin() %}readonly{% endif %}>
                        </div>

                        <div class="form-group">
                            <label for="uuid" class="form-label">{{ 'instructions.uuid'|trans }}</label>
                            <input type="text"
                                   class="form-control"
                                   id="uuid"
                                   value="{{ organisation.uuid }}"
                                   readonly>
                        </div>

                        <div class="form-group">
                            <label for="workflow_user_id" class="form-label">{{ 'instructions.workflow_user_id'|trans }}</label>
                            <input type="text"
                                   class="form-control"
                                   id="workflow_user_id"
                                   value="{{ userOrganisation.workflowUserId ?? 'Not set' }}"
                                   readonly>
                        </div>
                    </div>

                    <!-- Agent Settings -->
                    <div class="form-section">
                        <h2 class="section-title">{{ 'instructions.agent_settings'|trans }}</h2>
                        <p class="section-subtitle">Describe the agent's role or personality. This sets the tone of how it responds.</p>

                        <div class="form-group">
                            <label for="system_prompt" class="form-label">System Prompt</label>
                            <textarea class="form-textarea"
                                      id="system_prompt"
                                      name="system_prompt"
                                      placeholder="Enter the agent's instructions and personality..."
                                      {% if not app.user.isAdmin() %}readonly{% endif %}>{{ userOrganisation.systemPrompt ?? '' }}</textarea>
                        </div>
                    </div>

                    <!-- Webhook Configuration -->
                    <div class="form-section">
                        <div class="form-group">
                            <label for="webhook_type" class="form-label">Webhook Type</label>
                            <select class="form-select"
                                    id="webhook_type"
                                    name="webhook_type"
                                    data-instructions-target="webhookType"
                                    data-action="change->instructions#onWebhookTypeChange"
                                    {% if not app.user.isAdmin() %}disabled{% endif %}>
                                <option value="">None</option>
                                <option value="COMMON" {% if organisation.webhookType == 'COMMON' %}selected{% endif %}>Common</option>
                                <option value="N8N" {% if organisation.webhookType == 'N8N' %}selected{% endif %}>N8N</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="webhook_url" class="form-label">Webhook URL</label>
                            <input type="url"
                                   class="form-control"
                                   id="webhook_url"
                                   name="webhook_url"
                                   data-instructions-target="webhookUrl"
                                   data-action="input->instructions#onWebhookUrlChange"
                                   value="{{ organisation.webhookUrl ?? '' }}"
                                   placeholder="https://example.com/webhook"
                                   {% if not app.user.isAdmin() %}readonly{% endif %}>
                        </div>

                        <div class="form-group" id="n8n-api-key-group" style="{% if organisation.webhookType != 'N8N' %}display: none;{% endif %}">
                            <label for="n8n_api_key" class="form-label">N8N API Key</label>
                            <input type="password"
                                   class="form-control"
                                   id="n8n_api_key"
                                   name="n8n_api_key"
                                   value="{{ organisation.n8nApiKey ?? '' }}"
                                   placeholder="Enter your N8N API key"
                                   {% if not app.user.isAdmin() %}readonly{% endif %}>
                            <small class="form-text text-muted">Required to fetch workflow details from N8N</small>
                        </div>
                    </div>

                    {% if app.user.isAdmin() %}
                        <button type="submit" class="btn-primary">Save Settings</button>
                    {% endif %}
                </div>

                <!-- Right Column -->
                <div class="right-column" id="workflow-column" data-instructions-target="workflowColumn" {% if organisation.webhookType != 'N8N' %}class="hidden"{% endif %}>
                    <h2 class="section-title">{{ 'instructions.workflow_visualization'|trans }}</h2>
                    <p class="section-subtitle">Visual representation of your workflow (read-only)</p>

                    <div class="workflow-canvas">
                        <div id="reactflow-container" data-instructions-target="reactContainer" data-org-id="{{ organisation.uuid }}">
                            <div class="workflow-placeholder">
                                <span>Loading workflow visualization...</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Flash Messages -->
{% for label, messages in app.flashes %}
    {% for message in messages %}
        <div class="alert alert-{{ label }}">
            {{ message }}
        </div>
    {% endfor %}
{% endfor %}
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    {{ encore_entry_script_tags('n8n-workflow') }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const webhookTypeSelect = document.getElementById('webhook_type');
            const workflowColumn = document.getElementById('workflow-column');
            const webhookUrlInput = document.getElementById('webhook_url');
            const n8nApiKeyGroup = document.getElementById('n8n-api-key-group');
            let reactFlowInitialized = false;

            // Toggle workflow visualization and API key field based on webhook type
            webhookTypeSelect.addEventListener('change', function() {
                if (this.value === 'N8N') {
                    workflowColumn.classList.remove('hidden');
                    n8nApiKeyGroup.style.display = 'block';
                    if (!reactFlowInitialized && webhookUrlInput.value) {
                        initializeReactFlow();
                    }
                } else {
                    workflowColumn.classList.add('hidden');
                    n8nApiKeyGroup.style.display = 'none';
                }
            });

            // Initialize ReactFlow if N8N is already selected
            if (webhookTypeSelect.value === 'N8N' && webhookUrlInput.value) {
                initializeReactFlow();
            }

            function initializeReactFlow() {
                // This will be replaced with actual ReactFlow initialization
                // after we install the necessary dependencies
                console.log('ReactFlow initialization would happen here');
                reactFlowInitialized = true;

                // Fetch N8N workflow data
                const orgId = document.getElementById('reactflow-container').dataset.orgId;
                fetchWorkflowData(orgId);
            }

            function fetchWorkflowData(orgId) {
                fetch(`/instructions/api/n8n-workflow/${orgId}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.error) {
                            console.error('Failed to fetch workflow:', data.error);
                            document.querySelector('.workflow-placeholder span').textContent =
                                'Failed to load workflow: ' + data.error;
                        } else {
                            console.log('Workflow data:', data);
                            // ReactFlow will render this data
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching workflow:', error);
                        document.querySelector('.workflow-placeholder span').textContent =
                            'Error loading workflow';
                    });
            }
        });
    </script>
{% endblock %}
