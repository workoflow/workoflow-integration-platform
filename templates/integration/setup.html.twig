{% extends 'base.html.twig' %}

{% block title %}{{ 'integration.setup'|trans }} {{ integration.getName() }} - Workoflow{% endblock %}

{% block body %}
<div class="integrations-page">
    {% include '_partials/header.html.twig' %}

    <div class="setup-container">
        <div class="setup-card">
            <div class="setup-header">
                <h1>{{ 'integration.setup'|trans }} {{ integration.getName() }}</h1>
                <p class="setup-description">
                    {{ 'integration.setup_description'|trans({'%name%': integration.getName()})|default('Configure your ' ~ integration.getName() ~ ' integration') }}
                </p>
            </div>

            {% if existingInstances|length > 0 and not isEdit %}
                <div class="existing-instances">
                    <p class="instances-info">
                        {{ 'integration.existing_instances'|trans|default('You already have %count% %name% integration(s)')|replace({'%count%': existingInstances|length, '%name%': integration.getName()}) }}
                    </p>
                    <ul class="instances-list">
                        {% for instance in existingInstances %}
                            <li>{{ instance.name }} {% if instance.active %}<span class="badge badge-success">Active</span>{% endif %}</li>
                        {% endfor %}
                    </ul>
                </div>
            {% endif %}

            {{ form_start(form, {'attr': {'class': 'setup-form'}}) }}

                {# Display global form errors #}
                {% if form.vars.errors|length > 0 %}
                    <div class="alert alert-danger">
                        {{ form_errors(form) }}
                    </div>
                {% endif %}

                <div class="form-group {% if form.name.vars.errors|length > 0 %}has-error{% endif %}">
                    <label for="integration_config_name">
                        {{ 'integration.instance_name'|trans|default('Instance Name') }} <span class="required">*</span>
                    </label>
                    <span class="field-hint">{{ 'integration.instance_name_hint'|trans|default('A friendly name to identify this integration instance (e.g., "Production Jira", "Dev SharePoint")') }}</span>
                    {{ form_widget(form.name, {'attr': {'class': 'form-control', 'placeholder': 'integration.instance_name_placeholder'|trans|default('e.g., Production ' ~ integration.getName())}}) }}
                    {{ form_errors(form.name) }}
                </div>

                <h3>{{ 'integration.credentials'|trans|default('Credentials') }}</h3>

                {% set hasOAuthField = false %}
                {% for field in credentialFields %}
                    {% if field.getType() == 'oauth' %}
                        {% set hasOAuthField = true %}
                        {% if config and config.id %}
                            {# Show OAuth connection button only after initial save #}
                            <div class="oauth-section">
                                <div class="alert alert-info">
                                    <h4>{{ field.getLabel() }}</h4>
                                    <p>{{ field.getHint() }}</p>
                                </div>
                                {% if config.encryptedCredentials %}
                                    <div class="oauth-status connected">
                                        <i class="fas fa-check-circle"></i>
                                        <span>{{ 'status.connected'|trans|default('Connected to Microsoft') }}</span>
                                    </div>
                                    <a href="{{ path('app_integration_oauth_microsoft_start', {configId: config.id}) }}"
                                       class="btn btn-secondary"
                                       onclick="return confirm('{{ 'integration.oauth_reconnect_confirm'|trans|default('This will replace your existing connection. Continue?') }}');">
                                        <i class="fab fa-microsoft"></i> {{ 'integration.reconnect_microsoft'|trans|default('Reconnect with Microsoft') }}
                                    </a>
                                {% else %}
                                    <div class="oauth-status disconnected">
                                        <i class="fas fa-times-circle"></i>
                                        <span>{{ 'status.not_connected'|trans|default('Not connected') }}</span>
                                    </div>
                                    <a href="{{ path('app_integration_oauth_microsoft_start', {configId: config.id}) }}"
                                       class="btn btn-primary">
                                        <i class="fab fa-microsoft"></i> {{ field.getLabel() }}
                                    </a>
                                {% endif %}
                            </div>
                        {% else %}
                            {# Show info message for new configs #}
                            <div class="alert alert-info">
                                <h4>{{ field.getLabel() }}</h4>
                                <p>{{ field.getHint() }}</p>
                                <p><strong>{{ 'integration.oauth_required'|trans|default('Microsoft authorization is required. Click "Connect with Microsoft" below to continue.') }}</strong></p>
                            </div>
                        {% endif %}
                    {% else %}
                        {% set fieldName = field.getName() %}
                        {% set isSensitiveField = fieldName in ['api_token', 'password', 'client_secret'] %}
                        {% set fieldExists = form.vars.data[fieldName ~ '_exists']|default(false) %}

                        <div class="form-group {% if form[fieldName].vars.errors|length > 0 %}has-error{% endif %}">
                            <label for="integration_config_{{ fieldName }}">
                                {{ field.getLabel() }}
                                {% if field.isRequired() and (not isEdit or not isSensitiveField) %}
                                    <span class="required">*</span>
                                {% endif %}
                            </label>
                            {% if field.getHint() %}
                                <span class="field-hint">{{ field.getHint()|raw }}</span>
                            {% endif %}

                            {% if isSensitiveField and fieldExists and isEdit %}
                                {{ form_widget(form[fieldName], {'attr': {'class': 'form-control', 'placeholder': 'integration.keep_existing'|trans|default('Leave empty to keep existing value')}}) }}
                                <small class="form-text text-muted">
                                    <i class="fas fa-lock"></i> {{ 'integration.credential_exists'|trans|default('Current value is stored securely. Leave empty to keep it.') }}
                                </small>
                            {% else %}
                                {{ form_widget(form[fieldName], {'attr': {'class': 'form-control', 'placeholder': field.getPlaceholder()}}) }}
                            {% endif %}
                            {{ form_errors(form[fieldName]) }}
                        </div>
                    {% endif %}
                {% endfor %}

                <div class="form-actions">
                    {% if hasOAuthField and not config %}
                        {# For new OAuth integrations, change the button to "Connect with Microsoft" #}
                        <button type="submit" class="btn btn-primary">
                            <i class="fab fa-microsoft"></i> {{ 'integration.connect_microsoft'|trans|default('Connect with Microsoft') }}
                        </button>
                    {% else %}
                        <button type="submit" class="btn btn-primary">
                            {{ 'integration.save_configuration'|trans|default('Save Configuration') }}
                        </button>
                    {% endif %}
                    <a href="{{ path('app_integrations') }}" class="btn btn-secondary">
                        {{ 'action.cancel'|trans }}
                    </a>
                </div>

            {{ form_end(form) }}
        </div>
    </div>
</div>

<style>
.setup-container {
    max-width: 600px;
    margin: 2rem auto;
    padding: 0 1rem;
}

.setup-card {
    background: var(--card-background);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 2rem;
}

.setup-header {
    margin-bottom: 2rem;
}

.setup-header h1 {
    margin: 0 0 0.5rem 0;
}

.setup-description {
    color: var(--text-secondary);
    margin: 0;
}

.setup-form h3 {
    margin: 2rem 0 1rem 0;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid var(--border-color);
}

.form-group {
    margin-bottom: 1.5rem;
}

.form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
}

.field-hint {
    display: block;
    font-size: 0.875rem;
    color: var(--text-secondary);
    font-weight: normal;
    margin-top: 0.25rem;
}

.field-hint a {
    color: var(--primary-color, #3b82f6);
    text-decoration: none;
    font-weight: 500;
}

.field-hint a:hover {
    text-decoration: underline;
}

/* Asterisk styling - normal color by default */
span.required {
    color: var(--text-secondary);
    margin-left: 0.25rem;
}

/* Red asterisk only when form-group has error */
.form-group.has-error span.required {
    color: var(--danger-color);
}

/* Reset label color even if it has required class */
label.required {
    color: var(--text-primary);
}

.form-control {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid var(--border-color);
    border-radius: 4px;
    background: var(--input-background);
    color: var(--text-primary);
    font-size: 1rem;
}

.form-control:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(var(--primary-color-rgb), 0.1);
}

.form-actions {
    display: flex;
    gap: 1rem;
    margin-top: 2rem;
    padding-top: 2rem;
    border-top: 1px solid var(--border-color);
}

.btn {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 4px;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    text-decoration: none;
    display: inline-block;
    transition: all 0.2s;
}

.btn-primary {
    background: var(--primary-color);
    color: white;
}

.btn-primary:hover {
    background: var(--primary-color-dark);
}

.btn-secondary {
    background: var(--secondary-background);
    color: var(--text-primary);
}

.btn-secondary:hover {
    background: var(--secondary-background-dark);
}

.existing-instances {
    background: var(--info-background, #1a2332);
    border: 1px solid var(--info-border, #3b82f6);
    border-radius: 4px;
    padding: 1rem;
    margin-bottom: 1.5rem;
}

.instances-info {
    margin: 0 0 0.5rem 0;
    font-weight: 500;
    color: var(--info-text, #93bbfc);
}

.instances-list {
    list-style: none;
    padding: 0;
    margin: 0;
}

.instances-list li {
    padding: 0.5rem 0;
    border-top: 1px solid rgba(59, 130, 246, 0.2);
    color: var(--text-primary);
}

.instances-list li:first-child {
    border-top: none;
}

.badge {
    display: inline-block;
    padding: 0.25rem 0.5rem;
    border-radius: 3px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
}

.badge-success {
    background: var(--success-color, #10b981);
    color: white;
}

.oauth-section {
    margin: 1.5rem 0;
}

.oauth-status {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem;
    border-radius: 4px;
    margin-bottom: 1rem;
    font-weight: 500;
}

.oauth-status.connected {
    background: var(--success-background, rgba(16, 185, 129, 0.1));
    color: var(--success-color, #10b981);
    border: 1px solid var(--success-color, #10b981);
}

.oauth-status.disconnected {
    background: var(--warning-background, rgba(251, 191, 36, 0.1));
    color: var(--warning-color, #fbbf24);
    border: 1px solid var(--warning-color, #fbbf24);
}

.oauth-status i {
    font-size: 1.25rem;
}

.alert {
    padding: 1rem;
    border-radius: 4px;
    margin-bottom: 1rem;
}

.alert-info {
    background: var(--info-background, #1a2332);
    border: 1px solid var(--info-border, #3b82f6);
    color: var(--info-text, #93bbfc);
}

.alert-info h4 {
    margin: 0 0 0.5rem 0;
    color: var(--info-text, #93bbfc);
}

.alert-info p {
    margin: 0.5rem 0 0 0;
}

.alert-info p:last-child {
    margin-bottom: 0;
}

.alert-danger {
    background: var(--danger-background, rgba(239, 68, 68, 0.1));
    border: 1px solid var(--danger-color, #ef4444);
    color: var(--danger-text, #fca5a5);
    padding: 1rem;
    border-radius: 4px;
    margin-bottom: 1rem;
}

.form-text {
    display: block;
    margin-top: 0.25rem;
    font-size: 0.875rem;
}

.text-muted {
    color: var(--text-secondary);
}

.form-text i {
    margin-right: 0.25rem;
}

.form-control.is-invalid,
.form-group.has-error .form-control {
    border-color: var(--danger-color, #ef4444);
}

.form-control.is-invalid:focus,
.form-group.has-error .form-control:focus {
    border-color: var(--danger-color, #ef4444);
    box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
}

.invalid-feedback {
    display: block;
    margin-top: 0.25rem;
    font-size: 0.875rem;
    color: var(--danger-color, #ef4444);
}

/* Symfony form errors styling */
.form-error-message {
    display: block;
    margin-top: 0.5rem;
    font-size: 0.875rem;
    color: var(--danger-color, #ef4444);
}

/* Form errors list - default Symfony rendering */
.form-group ul {
    list-style-type: disc;
    padding-left: 1.5rem;
    margin: 0.5rem 0 0 0;
}

.form-group ul li {
    color: var(--danger-color, #ef4444);
    font-size: 0.875rem;
    line-height: 1.4;
    margin-bottom: 0.25rem;
}

ul.form-errors {
    list-style-type: disc;
    padding-left: 1.5rem;
    margin: 0.5rem 0 0 0;
}

ul.form-errors li {
    color: var(--danger-color, #ef4444);
    font-size: 0.875rem;
    line-height: 1.4;
    margin-bottom: 0.25rem;
}
</style>
{% endblock %}